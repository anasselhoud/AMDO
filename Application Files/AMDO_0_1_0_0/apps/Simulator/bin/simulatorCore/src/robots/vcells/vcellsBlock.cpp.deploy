/*
 * VcellsBlock.cpp
 *
 *  Created on: 12 avril 2013
 *      Author: ben
 */

#include <iostream>
#include "vcellsBlock.h"
#include "vcellsWorld.h"
#include "../../motion/translationEvents.h"
#include "../../replay/replayExporter.h"

using namespace std;

namespace Vcells {

    const int nbLinksMax=50;

VcellsBlock::VcellsBlock(int bId, BlockCodeBuilder bcb)
    : BaseSimulator::BuildingBlock(bId, bcb, nbLinksMax) {
    orientationCode=0;
#ifdef DEBUG_OBJECT_LIFECYCLE
    OUTPUT << "VcellsBlock #" << bId << " constructor" << endl;
#endif
}

VcellsBlock::~VcellsBlock() {
#ifdef DEBUG_OBJECT_LIFECYCLE
    OUTPUT << "VcellsBlock #" << blockId << " destructor" << endl;
#endif
}

P2PNetworkInterface *VcellsBlock::getP2PNetworkInterfaceByRelPos(const Cell3DPosition &pos) const {
    cerr << "getP2PNetworkInterfaceByRelPos not available!" << endl;
    return NULL;
}

int VcellsBlock::getDirection(P2PNetworkInterface *given_interface) const {

    for( int i=0; i <= nbLinksMax; ++i) {
        P2PNetworkInterface* p2p = P2PNetworkInterfaces[ i];
        if( p2p == given_interface) {
            return i;
        }
    }

//    for( int i( FreeLattice::North); i <= FreeLattice::Bottom; ++i) {
//        P2PNetworkInterface* p2p = P2PNetworkInterfaces[ i];
//        if( p2p == given_interface) {
//            return FreeLattice::Direction(i);
//        }
//    }
    assert(0);			// should never get here
    return -1;
}

Cell3DPosition VcellsBlock::getPosition(FreeLattice::Direction d) const {
    cerr << "getPosition not available!" << endl;
    return position;
}

P2PNetworkInterface *VcellsBlock::getP2PNetworkInterfaceByDestBlockId(bID id) const {
    int i=0;
    while (i<nbLinksMax && (P2PNetworkInterfaces[i]->connectedInterface == NULL
                   || P2PNetworkInterfaces[i]->connectedInterface->hostBlock->blockId != id)) {
        i++;
    }
    return (i<nbLinksMax?P2PNetworkInterfaces[i]:NULL);
}


void VcellsBlock::addNeighbor(P2PNetworkInterface *ni, BuildingBlock* target) {
#ifdef DEBUG_NEIGHBORHOOD
    OUTPUT << "Simulator: "<< blockId << " add neighbor " << target->blockId << " on "
           << getWorld()->lattice->getDirectionString(getDirection(ni)) << endl;
#endif
    getScheduler()->schedule(
        new AddNeighborEvent(getScheduler()->now(), this,
                             getWorld()->lattice->getOppositeDirection(getDirection(ni)), target->blockId));

//    getScheduler()->schedule(
//            new AddNeighborEvent(getScheduler()->now(), this,
//                                 getWorld()->lattice->getOppositeDirection(getDirection(ni)), target->blockId));
}

void VcellsBlock::removeNeighbor(P2PNetworkInterface *ni) {
#ifdef DEBUG_NEIGHBORHOOD
    OUTPUT << "Simulator: "<< blockId << " remove neighbor on "
           << getWorld()->lattice->getDirectionString(getDirection(ni)) << endl;
#endif
    getScheduler()->schedule(
        new RemoveNeighborEvent(getScheduler()->now(), this,
                                getWorld()->lattice->getOppositeDirection(getDirection(ni))));
}

bool VcellsBlock::canMoveTo(const Cell3DPosition& dest) const {
    return false;
}

bool VcellsBlock::moveTo(const Cell3DPosition& dest) {
    return false;
}

void VcellsBlock::setDisplayedValue(uint16_t n) {
    static_cast<VcellsGlBlock*>(ptrGlBlock)->setDisplayedValue(n);
    if (ReplayExporter::isReplayEnabled())
        ReplayExporter::getInstance()->writeDisplayUpdate(getScheduler()->now(), blockId, n);
}

void VcellsBlock::setRotation(float r) {
        if (getState() >= ALIVE) {
            getWorld()->updateGlData(this,r);

            /*if (ReplayExporter::isReplayEnabled())
                ReplayExporter::getInstance()->writePositionUpdate(getScheduler()->now(),
                                                                   blockId, position, orientationCode);*/
        }
}


void VcellsBlock::serialize(std::ofstream &bStream) {
    /*bStream.write((char*)&blockId, sizeof(ReplayTags::u4));
    bStream.write((char*)&position, 3*sizeof(ReplayTags::u2));
    bStream.write((char*)&orientationCode, sizeof(ReplayTags::u1));
    ReplayTags::u1 u1color[3];
    for (std::size_t i=0;i<3; i++) {
        u1color[i] = static_cast<int>(color.rgba[i] * 255.0);
        if (u1color[i]<0) u1color[i]=0;
        else if (u1color[i]>255) u1color[i]=255;
    }
    bStream.write((char*)&u1color, 3*sizeof(ReplayTags::u1));
    ReplayTags::u2 displayValue = dynamic_cast<VcellsGlBlock*>(ptrGlBlock)->displayedValue;
    bStream.write((char*)&displayValue, sizeof(ReplayTags::u2));*/
    cerr << "TODO serialize" << endl;
}

void VcellsBlock::serialize_cleartext(std::ofstream &dbStream) {
    /*dbStream << (int)blockId << ";"
             << position[0] << "," << position[1] << ","<< position[2] << "," << (int) orientationCode << ";"
             << (int)(color[0]*255) << "," << (int)(color[1]*255) << "," << (int)(color[2]*255) << ";" << dynamic_cast<VcellsGlBlock*>(ptrGlBlock)->displayedValue << endl;
             */
}

P2PNetworkInterface *VcellsBlock::getFreeInterface() {
    auto it=P2PNetworkInterfaces.begin();
    while (it!=P2PNetworkInterfaces.end() && (*it)->isConnected()) {
        it++;
    }
    // si nécéssaire, on peut ajouter une nouvelle interface au vector !
//    cout<<" IIIIITTTTTT is ============> "<<*it<<endl;
    return (it==P2PNetworkInterfaces.end()?nullptr:(*it));
    return (it==P2PNetworkInterfaces.end()?nullptr:(*it));
}

}
